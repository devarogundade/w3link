{"language":"Solidity","sources":{"@openzeppelin/contracts/access/Ownable.sol":{"content":"// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.9.0) (access/Ownable.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../utils/Context.sol\";\n\n/**\n * @dev Contract module which provides a basic access control mechanism, where\n * there is an account (an owner) that can be granted exclusive access to\n * specific functions.\n *\n * By default, the owner account will be the one that deploys the contract. This\n * can later be changed with {transferOwnership}.\n *\n * This module is used through inheritance. It will make available the modifier\n * `onlyOwner`, which can be applied to your functions to restrict their use to\n * the owner.\n */\nabstract contract Ownable is Context {\n    address private _owner;\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    /**\n     * @dev Initializes the contract setting the deployer as the initial owner.\n     */\n    constructor() {\n        _transferOwnership(_msgSender());\n    }\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        _checkOwner();\n        _;\n    }\n\n    /**\n     * @dev Returns the address of the current owner.\n     */\n    function owner() public view virtual returns (address) {\n        return _owner;\n    }\n\n    /**\n     * @dev Throws if the sender is not the owner.\n     */\n    function _checkOwner() internal view virtual {\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\n    }\n\n    /**\n     * @dev Leaves the contract without owner. It will not be possible to call\n     * `onlyOwner` functions. Can only be called by the current owner.\n     *\n     * NOTE: Renouncing ownership will leave the contract without an owner,\n     * thereby disabling any functionality that is only available to the owner.\n     */\n    function renounceOwnership() public virtual onlyOwner {\n        _transferOwnership(address(0));\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Can only be called by the current owner.\n     */\n    function transferOwnership(address newOwner) public virtual onlyOwner {\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\n        _transferOwnership(newOwner);\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Internal function without access restriction.\n     */\n    function _transferOwnership(address newOwner) internal virtual {\n        address oldOwner = _owner;\n        _owner = newOwner;\n        emit OwnershipTransferred(oldOwner, newOwner);\n    }\n}\n"},"@openzeppelin/contracts/access/Ownable2Step.sol":{"content":"// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.9.0) (access/Ownable2Step.sol)\n\npragma solidity ^0.8.0;\n\nimport \"./Ownable.sol\";\n\n/**\n * @dev Contract module which provides access control mechanism, where\n * there is an account (an owner) that can be granted exclusive access to\n * specific functions.\n *\n * By default, the owner account will be the one that deploys the contract. This\n * can later be changed with {transferOwnership} and {acceptOwnership}.\n *\n * This module is used through inheritance. It will make available all functions\n * from parent (Ownable).\n */\nabstract contract Ownable2Step is Ownable {\n    address private _pendingOwner;\n\n    event OwnershipTransferStarted(address indexed previousOwner, address indexed newOwner);\n\n    /**\n     * @dev Returns the address of the pending owner.\n     */\n    function pendingOwner() public view virtual returns (address) {\n        return _pendingOwner;\n    }\n\n    /**\n     * @dev Starts the ownership transfer of the contract to a new account. Replaces the pending transfer if there is one.\n     * Can only be called by the current owner.\n     */\n    function transferOwnership(address newOwner) public virtual override onlyOwner {\n        _pendingOwner = newOwner;\n        emit OwnershipTransferStarted(owner(), newOwner);\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`) and deletes any pending owner.\n     * Internal function without access restriction.\n     */\n    function _transferOwnership(address newOwner) internal virtual override {\n        delete _pendingOwner;\n        super._transferOwnership(newOwner);\n    }\n\n    /**\n     * @dev The new owner accepts the ownership transfer.\n     */\n    function acceptOwnership() public virtual {\n        address sender = _msgSender();\n        require(pendingOwner() == sender, \"Ownable2Step: caller is not the new owner\");\n        _transferOwnership(sender);\n    }\n}\n"},"@openzeppelin/contracts/utils/Context.sol":{"content":"// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract Context {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n}\n"},"@openzeppelin/contracts/utils/Counters.sol":{"content":"// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/Counters.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @title Counters\n * @author Matt Condon (@shrugs)\n * @dev Provides counters that can only be incremented, decremented or reset. This can be used e.g. to track the number\n * of elements in a mapping, issuing ERC721 ids, or counting request ids.\n *\n * Include with `using Counters for Counters.Counter;`\n */\nlibrary Counters {\n    struct Counter {\n        // This variable should never be directly accessed by users of the library: interactions must be restricted to\n        // the library's function. As of Solidity v0.5.2, this cannot be enforced, though there is a proposal to add\n        // this feature: see https://github.com/ethereum/solidity/issues/4637\n        uint256 _value; // default: 0\n    }\n\n    function current(Counter storage counter) internal view returns (uint256) {\n        return counter._value;\n    }\n\n    function increment(Counter storage counter) internal {\n        unchecked {\n            counter._value += 1;\n        }\n    }\n\n    function decrement(Counter storage counter) internal {\n        uint256 value = counter._value;\n        require(value > 0, \"Counter: decrement overflow\");\n        unchecked {\n            counter._value = value - 1;\n        }\n    }\n\n    function reset(Counter storage counter) internal {\n        counter._value = 0;\n    }\n}\n"},"project:/contracts/W3Link.sol":{"content":"// SPDX-License-Identifier: MIT\r\npragma solidity ^0.8.17;\r\n\r\nimport \"./interfaces/IW3Link.sol\";\r\nimport \"./interfaces/IW3LinkApp.sol\";\r\nimport \"./interfaces/IW3LinkConfig.sol\";\r\nimport \"./signature/Signature.sol\";\r\n\r\nimport \"@openzeppelin/contracts/access/Ownable2Step.sol\";\r\nimport \"@openzeppelin/contracts/utils/Counters.sol\";\r\n\r\ncontract W3Link is IW3Link, Ownable2Step, Signature {    \r\n    using Counters for Counters.Counter;\r\n    \r\n    address private _config;\r\n    uint256 public immutable _chainId;\r\n\r\n    Counters.Counter private _dispatchId;\r\n\r\n    mapping(bytes32 => bool) private _executed;\r\n\r\n    struct Gas {\r\n        uint256 value;\r\n    }\r\n\r\n    mapping(address => Gas) private _gasContents;\r\n\r\n    event SetConfig(address newConfig);\r\n    event Dispatch(\r\n        bytes32 hash,\r\n        address destContractId,\r\n        address fromContractId,\r\n        uint256 destChainId,\r\n        uint256 fee,\r\n        bytes data,\r\n        bytes32 extra\r\n    );\r\n    event Executed(bytes32 hash);\r\n    event Deposit(address contractId, uint256 value);\r\n    event Withdraw(address contractId, uint256 value);\r\n\r\n    constructor(uint256 chainId_, address config_) Ownable2Step() {\r\n        _chainId = chainId_;\r\n        _config = config_;\r\n        \r\n    }\r\n\r\n    function dispatch(\r\n        address destContractId,\r\n        bytes calldata data,\r\n        uint256 destChainId,\r\n        bytes32 extra\r\n    ) external override {\r\n        bytes32 hash = getHash(_dispatchId.current());\r\n\r\n        _executed[hash] = false;\r\n\r\n        uint256 fee = _payGas(destChainId);\r\n\r\n        emit Dispatch(\r\n            hash,\r\n            destContractId,\r\n            _msgSender(),\r\n            destChainId,\r\n            fee,\r\n            data,\r\n            extra\r\n        );\r\n\r\n        _dispatchId.increment();\r\n    }\r\n\r\n    function execute(\r\n        bytes32 hash,\r\n        address destContractId,\r\n        bytes calldata data,\r\n        uint256 fromChainId,\r\n        bytes32 extra\r\n    ) external {      \r\n        require(!_executed[hash], \"Execute Completed\");\r\n        require(verifyHash(hash), \"Validation Failed\");\r\n\r\n        IW3LinkApp(destContractId).execute(fromChainId, data, extra);\r\n\r\n        _executed[hash] = true;\r\n\r\n        emit Executed(hash);\r\n    }\r\n\r\n    function _payGas(uint256 destChainId) internal returns (uint256) {\r\n        IW3LinkConfig w3linkConfig = IW3LinkConfig(_config);\r\n\r\n        uint256 fee = w3linkConfig.fee(destChainId);\r\n        if (fee == 0) return 0;\r\n\r\n        Gas storage gas = _gasContents[_msgSender()];\r\n        require(gas.value >= fee, \"Insufficient value\");\r\n        gas.value -= fee;\r\n\r\n        return fee;\r\n    }\r\n\r\n    function deposit() external payable override {\r\n        uint256 amount = msg.value;\r\n\r\n        _gasContents[_msgSender()].value += amount;\r\n        payable(owner()).transfer(amount);\r\n        emit Deposit(_msgSender(), amount);\r\n    }\r\n\r\n    function withdraw(uint256 amount) external override {\r\n        Gas storage gas = _gasContents[_msgSender()];\r\n        require(gas.value >= amount, \"Insufficient value\");\r\n        gas.value -= amount;\r\n\r\n        payable(_msgSender()).transfer(amount);\r\n        emit Withdraw(_msgSender(), amount);\r\n    }\r\n\r\n    function setConfig(address newConfig) external onlyOwner {\r\n        _config = newConfig;\r\n        emit SetConfig(newConfig);\r\n    }\r\n\r\n    function config() external view override returns (address) {\r\n        return _config;\r\n    }\r\n}\r\n"},"project:/contracts/interfaces/IW3Link.sol":{"content":"// SPDX-License-Identifier: MIT\r\npragma solidity ^0.8.17;\r\n\r\ninterface IW3Link {\r\n    function dispatch(\r\n        address destContractId,\r\n        bytes calldata data,\r\n        uint256 destChainId,\r\n        bytes32 extra\r\n    ) external;\r\n\r\n    function deposit() external payable;\r\n\r\n    function withdraw(uint256 amount) external;\r\n\r\n    function config() external view returns (address);\r\n}\r\n"},"project:/contracts/interfaces/IW3LinkApp.sol":{"content":"// SPDX-License-Identifier: MIT\r\npragma solidity ^0.8.17;\r\n\r\ninterface IW3LinkApp {\r\n    function execute(\r\n        uint256 fromChainId,\r\n        bytes calldata data,\r\n        bytes32 extra\r\n    ) external;\r\n\r\n    function onResult(bytes calldata data) external;\r\n}"},"project:/contracts/interfaces/IW3LinkConfig.sol":{"content":"// SPDX-License-Identifier: MIT\r\npragma solidity ^0.8.17;\r\n\r\ninterface IW3LinkConfig {\r\n    function fee(uint256 destChainId) external view returns (uint256);\r\n\r\n    function handler() external view returns (address);\r\n\r\n    function onlyHandler() external;\r\n}\r\n"},"project:/contracts/signature/Signature.sol":{"content":"// SPDX-License-Identifier: MIT\r\npragma solidity ^0.8.17;\r\n\r\ncontract Signature {\r\n    function verifyHash(bytes32 /* hash */) public pure virtual returns (bool) {\r\n        return true;\r\n    }\r\n\r\n    function getHash(uint256 dispatchId) public pure virtual returns (bytes32) {\r\n        return bytes32(dispatchId);\r\n    }\r\n}\r\n"}},"settings":{"remappings":[],"optimizer":{"enabled":true,"runs":200},"evmVersion":"byzantium"}}